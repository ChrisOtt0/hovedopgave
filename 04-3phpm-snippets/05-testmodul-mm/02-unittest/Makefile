include sources.mk

CC = gcc
CXX = g++
LD = g++

# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread $(INC)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
# Example: TESTS = $(BUILD_DIR)/functions_unittest1.exe
TESTS = $(BUILD_DIR)/TestModule_unittest1.exe

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -rf $(BUILD_DIR)

.PHONY: runall
runall: $(TESTS)
	@$(TESTS)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

$(BUILD_DIR)/gtest-all.o : $(GTEST_SRCS_) $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc -o $(BUILD_DIR)/gtest-all.o

$(BUILD_DIR)/gtest_main.o : $(GTEST_SRCS_) $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc -o $(BUILD_DIR)/gtest_main.o

$(BUILD_DIR)/gtest.a : $(BUILD_DIR)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(BUILD_DIR)/gtest_main.a : $(BUILD_DIR)/gtest-all.o $(BUILD_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# $(BUILD_DIR)/functions.o: $(SRC_DIR)/functions.c $(SRC_DIR)/functions.h $(GTEST_HEADERS)
# 	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/functions.c -o $(BUILD_DIR)/functions.o

# $(BUILD_DIR)/functions_unittest1.o: functions_unittest1.cc $(SRC_DIR)/functions.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c functions_unittest1.cc -o $(BUILD_DIR)/functions_unittest1.o

# $(BUILD_DIR)/functions_unittest1.exe: $(BUILD_DIR)/functions.o $(BUILD_DIR)/functions_unittest1.o $(BUILD_DIR)/gtest_main.a
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

$(BUILD_DIR)/TestModule.o: $(TEST_MODULE_DIR)/Src/TestModule.c $(TEST_MODULE_DIR)/Inc/TestModule.h $(GTEST_HEADERS) $(BUILD_DIR)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_MODULE_DIR)/Src/TestModule.c -o $(BUILD_DIR)/TestModule.o

$(BUILD_DIR)/TestModule_unittest1.o: TestModule_unittest1.cc $(TEST_MODULE_DIR)/Inc/TestModule.h $(GTEST_HEADERS) $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c TestModule_unittest1.cc -o $(BUILD_DIR)/TestModule_unittest1.o

$(BUILD_DIR)/TestModule_unittest1.exe: $(BUILD_DIR)/TestModule.o $(BUILD_DIR)/TestModule_unittest1.o $(BUILD_DIR)/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
